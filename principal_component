#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 25 11:35:11 2022

@author: eddyvonmatt
"""
import csv
from matplotlib.pyplot import (figure, title, subplot, plot, hist, show, boxplot, matshow, yticks, xticks, ylabel, ylim, xlabel, legend)
import numpy as np
from scipy import stats
import pandas as pd
import numpy as np
import seaborn as sns
import pandas as pd
from matplotlib import pyplot as plt
import matplotlib.pyplot as plt
from scipy.linalg import svd

attributeNames = ["Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type"]

file = open('glass.csv')
csvreader = csv.reader(file, delimiter=',')
data_list = []
for row in csvreader:
    data_list.append(row)
file.close()

numpy_array_string = np.array([np.array(x) for x in data_list])
X = numpy_array_string.astype(float)
y = X[:,-1]
X = X[:, 1:-1]
N,M = X.shape


r = np.arange(1,X.shape[1]+1)
plt.bar(r, np.std(X,0))
plt.xticks(r, attributeNames[1:-1])
plt.ylabel('Standard deviation')
plt.xlabel('Attributes')
plt.title('Glass Data Set: attribute standard deviations')

# Subtract the mean from the data and divide by the attribute standard
# deviation to obtain a standardized dataset:
Y = X - np.ones((N, 1))*X.mean(0)
Y = Y*(1/np.std(Y,0))

# PCA by computing SVD of Y
U,S,V = svd(Y,full_matrices=False)

# Compute variance explained by principal components
rho = (S*S) / (S*S).sum() 

threshold = 0.9

# Plot variance explained
plt.figure()
plt.plot(range(1,len(rho)+1),rho,'x-')
plt.plot(range(1,len(rho)+1),np.cumsum(rho),'o-')
plt.plot([1,len(rho)],[threshold, threshold],'k--')
plt.title('Variance explained by principal components');
plt.xlabel('Principal component');
plt.ylabel('Variance explained');
plt.legend(['Individual','Cumulative','Threshold'])
plt.grid()
plt.show()

pcs = [0, 1, 2, 3, 4, 5]
legendStrs = ['PC'+str(e+1) for e in pcs]
c = ['r','g','b']
bw = .1
r = np.arange(1,M+1)
for i in pcs:
    plt.bar(r+(i)*bw, V[:,i], width=bw)
plt.xticks(r+bw, attributeNames[1:-1])
plt.xlabel('Attributes')
plt.ylabel('Component coefficients')
plt.legend(legendStrs, loc='center left', bbox_to_anchor=(1, 0.5))
plt.grid()
plt.title('Glass Data Set: PCA Component Coefficients')
plt.show()

pcs = [0, 1, 2]
legendStrs = ['PC'+str(e+1) for e in pcs]
c = ['r','g','b']
bw = .2
r = np.arange(1,M+1)
for i in pcs:
    plt.bar(r+i*bw, V[:,i], width=bw)
plt.xticks(r+bw, attributeNames[1:-1])
plt.xlabel('Attributes')
plt.ylabel('Component coefficients')
plt.legend(legendStrs)
plt.grid()
plt.title('Glass Data Set: PCA Component Coefficients')
plt.show()


pcs = [3, 4, 5]
legendStrs = ['PC'+str(e+1) for e in pcs]
c = ['r','g','b']
bw = .2
r = np.arange(1,M+1)
for i in pcs:
    plt.bar(r+(i-3)*bw, V[:,i], width=bw)
plt.xticks(r+bw, attributeNames[1:-1])
plt.xlabel('Attributes')
plt.ylabel('Component coefficients')
plt.legend(legendStrs)
plt.grid()
plt.title('Glass Data Set: PCA Component Coefficients')
plt.show()

# Projections
classNames = ["building_windows_float_processed", "building_windows_non_float_processed", "vehicle_windows_float_processed", "vehicle_windows_non_float_processed", "containers", "tableware", "headlamps"]
C = len(classNames)

# scipy.linalg.svd returns "Vh", which is the Hermitian (transpose)
# of the vector V. So, for us to obtain the correct V, we transpose:
V = V.T    

# Project the centered data onto principal component space
Z = Y @ V

# Indices of the principal components to be plotted
i = 0
j = 1

#colors = ["r", "b", "g", "r", "b", "g", "r"]
# Plot PCA of the data
f = figure()
title('Glass Data Set: PCA')
for c in range(C):
    # select indices belonging to class c:
    class_mask = y==c
    plot(Z[class_mask,i], Z[class_mask,j], 'o', alpha=.5)
legend(classNames, loc='center left', bbox_to_anchor=(1, 0.5))
xlabel('PC{0}'.format(i+1))
ylabel('PC{0}'.format(j+1))

# Output result to screen
show()


# Exercise 4.2.6

from matplotlib.pyplot import figure, show
from mpl_toolkits.mplot3d import Axes3D


# Indices of the variables to plot
ind = [0, 1, 2]

f = figure()
ax = f.add_subplot(111, projection='3d') #Here the mpl_toolkits is used
for c in range(C):
    class_mask = (y==c)
    s = ax.scatter(Z[class_mask,ind[0]], Z[class_mask,ind[1]], Z[class_mask,ind[2]])

ax.view_init(30, 220)
ax.set_xlabel('PC{0}'.format(ind[0]+1))
ax.set_ylabel('PC{0}'.format(ind[1]+1))
ax.set_zlabel('PC{0}'.format(ind[2]+1))
ax.legend(classNames, loc='center left', bbox_to_anchor=(1, 0.5))
show()

print('Ran Exercise 4.2.6')

